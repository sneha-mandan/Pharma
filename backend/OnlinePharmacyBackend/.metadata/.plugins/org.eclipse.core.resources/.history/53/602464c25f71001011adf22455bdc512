package com.excelR.OnlinePharmacyApplication.controller;

import com.excelR.OnlinePharmacyApplication.config.JwtUtil;
import com.excelR.OnlinePharmacyApplication.dto.LoginRequest;
import com.excelR.OnlinePharmacyApplication.entity.User;
import static com.excelR.OnlinePharmacyApplication.exception.CustomExceptions.*;
import com.excelR.OnlinePharmacyApplication.service.UserService;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private UserService userService;

    @PostMapping("/register")
    public User register(@RequestBody User user) {
        return userService.registerUser(user);
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody @Valid LoginRequest loginRequest) {
        User existingUser = userService.getUserByUsername(loginRequest.getUsername());
        if (!existingUser.isApproved()) {
            throw new UserNotApprovedException("Your account is not approved yet. Please contact the administrator.");
        }

        Authentication authentication = authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(
                loginRequest.getUsername(),
                loginRequest.getPassword()
            )
        );

        String token = jwtUtil.generateToken(existingUser.getUsername(), existingUser.getRole());

        Map<String, Object> response = new HashMap<>();
        response.put("token", token);
        response.put("username", existingUser.getUsername());
        response.put("role", existingUser.getRole());

        return ResponseEntity.ok(response);
    }

    // âœ… New Google Login Welcome Endpoint
    @GetMapping("/welcome")
    public String welcome(@AuthenticationPrincipal OAuth2User user) {
        return "Welcome, " + user.getAttribute("name");
    }
}
