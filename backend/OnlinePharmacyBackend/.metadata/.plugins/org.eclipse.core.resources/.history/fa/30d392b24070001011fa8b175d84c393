package com.excelR.OnlinePharmacyApplication.service;

import com.excelR.OnlinePharmacyApplication.config.JwtUtil;
import com.excelR.OnlinePharmacyApplication.dto.LoginRequest;
import com.excelR.OnlinePharmacyApplication.dto.UserUpdateRequest;
import com.excelR.OnlinePharmacyApplication.entity.User;
import com.excelR.OnlinePharmacyApplication.exception.UserNotApprovedException;
import com.excelR.OnlinePharmacyApplication.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserDetailsServiceImpl {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtil jwtUtil;

    public String login(LoginRequest loginRequest) {
        User user = userRepository.findByUsername(loginRequest.getUsername());

        if (user == null) {
            throw new RuntimeException("Invalid username");
        }
        if (!passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
            throw new RuntimeException("Invalid password");
        }
        if (!user.isApproved()) {
            throw new UserNotApprovedException("User not approved");
        }
        return jwtUtil.generateToken(user.getUsername(), user.getRole());
    }

    public String updateUserDetails(Long id, UserUpdateRequest request, String loggedInUsername) {
        User loggedInUser = userRepository.findByUsername(loggedInUsername);
        if (loggedInUser == null) {
            throw new RuntimeException("Logged-in user not found");
        }

        User targetUser = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Target user not found"));

        boolean isAdmin = loggedInUser.getRole().equalsIgnoreCase("ADMIN");
        boolean isSelf = loggedInUsername.equals(targetUser.getUsername());

        if (!loggedInUser.isApproved()) {
            throw new RuntimeException("Access denied: User not approved");
        }

        if (!isAdmin && !isSelf) {
            throw new RuntimeException("Access denied: Cannot update another user's profile");
        }

        targetUser.setUsername(request.getName());
        targetUser.setEmail(request.getEmail());
        targetUser.setMobile(request.getContact());

        userRepository.save(targetUser);

        return "User details updated successfully";
    }
}
